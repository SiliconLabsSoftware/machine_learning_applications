name: Ubuntu env 
on: [push]

permissions:
  id-token: write
  contents: read

jobs:
  setup-to-slc:
    runs-on: ubuntu-latest
    steps:
      - name:  Start
        shell: bash
        run: |
          echo "==> Workflow: Ubuntu env -> SLC setup (through step 16)"
          echo "==> Repo: $GITHUB_REPOSITORY | Ref: $GITHUB_REF | SHA: $GITHUB_SHA"

      - name:  Checkout (public)
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name:  Create ~/src ~/venvs ~/tools
        shell: bash
        run: |
          set -e
          echo "==> Creating developer directories..."
          mkdir -p "$HOME/src" "$HOME/venvs" "$HOME/tools"
          ls -la "$HOME" | sed -n '1,120p'

      - name:  Apt update & essentials
        shell: bash
        run: |
          set -e
          sudo apt update -y
          sudo apt install -y git curl wget unzip build-essential cmake make \
                               python3 python3-pip python3-venv pkg-config \
                               libssl-dev libffi-dev python3-dev ninja-build \
                               telnet netcat-openbsd
      - name: Use Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          check-latest: true

      - name:  ARM GCC toolchain (12.2.rel1)
        shell: bash
        run: |
          set -e
          cd "$HOME/tools"
          echo "==> Download ARM toolchain 12.2.rel1"
          wget -q https://developer.arm.com/-/media/Files/downloads/gnu/12.2.rel1/binrel/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi.tar.xz
          tar xf arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi.tar.xz
          rm arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi.tar.xz
          echo "==> GCC version"
          "$HOME/tools/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi/bin/arm-none-eabi-gcc" --version | head -n 1

      - name:  Clone GSDK and ai-ml app
        shell: bash
        run: |
          set -e
          cd "$HOME/src"
          echo "==> Cloning public GSDK"
          git clone https://github.com/SiliconLabs/simplicity_sdk.git gsdk
          cd "$HOME/src/gsdk"
          git checkout v2025.6.2
          cd "$HOME/src/gsdk"
          mkdir extension
          cd "$HOME/src/gsdk/extension"
          git clone https://github.com/SiliconLabsSoftware/aiml-extension.git aiml-extension
          git lfs pull || true

      - name:  Create Python venv (sisdk)
        shell: bash
        run: |
          set -e
          python3 -m venv "$HOME/venvs/sisdk"
          source "$HOME/venvs/sisdk/bin/activate"
          python -V; pip -V
          echo "==> Upgrading pip"
          pip install --upgrade pip

      - name: SLC setup
        shell: bash
        run: |
          set -e
          echo "SLC_JAVA_HOME=$JAVA_HOME" >> "$GITHUB_ENV"
          mkdir -p "$HOME/tools"
          cd "$HOME/tools"
          curl -fsSL -o slc_cli_linux.zip https://www.silabs.com/documents/public/software/slc_cli_linux.zip
          rm -rf slc_cli
          unzip -q slc_cli_linux.zip -d slc_cli
          rm slc_cli_linux.zip
          SLC_DIR="$HOME/tools/slc_cli/slc_cli/bin/slc-cli"
          chmod +x "$SLC_DIR/slc-cli"
          ln -sf "$SLC_DIR/slc-cli" "$SLC_DIR/slc"
          echo "UC_CLI_DIR=$SLC_DIR" >> "$GITHUB_ENV"
          echo "$SLC_DIR" >> "$GITHUB_PATH"

      - name: Configure and trust SDK
        shell: bash
        run: |
          slc configuration --sdk ~/src/gsdk
          slc signature trust --sdk ~/src/gsdk
          slc signature trust --extension-path ~/src/gsdk/extension/aiml-extension

      # --- Generate the ml_blink example for brd2601b ---
      - name: Generate ml_blink (brd2601b)
        shell: bash
        run: |
          set -e
          source "$HOME/venvs/sisdk/bin/activate"
          cd "$HOME/src/gsdk/extension/aiml-extension/examples/ml_blink"
          slc generate -d target/brd2601b -p ml_blink.slcp --with brd2601b -s "$HOME/src/gsdk"
          cmake --preset project -S target/brd2601b/ml_blink_cmake
          cmake --build target/brd2601b/ml_blink_cmake/build

      # --- Verify expected outputs exist ---
      - name: Verify output files
        shell: bash
        run: |
          set -e
          OUT_DIR="$HOME/src/gsdk/extension/aiml-extension/examples/ml_blink/target/brd2601b/cmake_gcc/build/base"
          echo "==> Checking outputs in: $OUT_DIR"
          ls -la "$OUT_DIR" || { echo "!! Output dir missing"; exit 1; }

          required=("ml_blink.out" "ml_blink.bin" "ml_blink.hex" "ml_blink.s37" "ml_blink.map")
          missing=0
          for f in "${required[@]}"; do
            if [ ! -f "$OUT_DIR/$f" ]; then
              echo "!! Missing: $f"; missing=1
            else
              echo "âœ” Found: $f ($(stat -c %s "$OUT_DIR/$f") bytes)"
            fi
          done
          [ $missing -eq 0 ] || { echo "!! One or more build outputs are missing"; exit 1; }

      - name: Done (stop after SLC setup)
        shell: bash
        run: |
          echo "==> Finished through step 16 (SLC setup)."