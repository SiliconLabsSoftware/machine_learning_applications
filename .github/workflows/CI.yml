name: Ubuntu env -> SLC setup (uses SSH & Artifactory secrets)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

env:
  # May be empty; we’ll fall back in bash if not set
  ARTIFACTORY_PYPI_URL: ${{ vars.ARTIFACTORY_PYPI_URL }}

jobs:
  setup-to-slc:
    runs-on: ubuntu-latest
    steps:
      - name: 🧾 Start
        shell: bash
        run: |
          echo "==> Workflow: Ubuntu env -> SLC setup (through step 16)"
          echo "==> Repo: $GITHUB_REPOSITORY | Ref: $GITHUB_REF | SHA: $GITHUB_SHA"

      - name: 📥 Checkout (public)
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: 🔑 SSH key setup (for internal git over SSH)
        shell: bash
        run: |
          set -e
          if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "==> SSH key provided: configuring ~/.ssh"
            mkdir -p ~/.ssh
            printf '%s\n' "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            touch ~/.ssh/known_hosts
            echo "==> Preloading known_hosts for stash-mirror.silabs.com & github.com"
            ssh-keyscan -T 5 stash-mirror.silabs.com 2>/dev/null >> ~/.ssh/known_hosts || true
            ssh-keyscan -T 5 github.com 2>/dev/null >> ~/.ssh/known_hosts || true
            echo "==> SSH ready."
          else
            echo "!! No SSH_PRIVATE_KEY secret found. Internal SSH clones will be skipped."
          fi

      - name: 🖥️ System info
        shell: bash
        run: |
          echo "==> uname -a"; uname -a
          echo "==> /etc/os-release"; cat /etc/os-release
          echo "==> whoami: $(whoami) | home: $HOME | workdir: $(pwd)"
          echo "==> Disk usage:"; df -h .

      - name: 📂 Create ~/src ~/venvs ~/tools
        shell: bash
        run: |
          set -e
          echo "==> Creating developer directories..."
          mkdir -p "$HOME/src" "$HOME/venvs" "$HOME/tools"
          ls -la "$HOME" | sed -n '1,120p'

      - name: 📦 Apt update & essentials
        shell: bash
        run: |
          set -e
          echo "==> apt update"; sudo apt update -y
          echo "==> install essentials"
          sudo apt install -y git curl wget unzip build-essential cmake make \
                               python3 python3-pip python3-venv pkg-config \
                               libssl-dev libffi-dev python3-dev ninja-build \
                               telnet netcat-openbsd
          echo "==> Versions:"
          python3 --version || true
          pip3 --version || true
          cmake --version || true
          ninja --version || true

      - name: ☕ Install OpenJDK 17 + set JAVA_HOME
        shell: bash
        run: |
          set -e
          echo "==> Installing OpenJDK 17"; sudo apt install -y openjdk-17-jdk
          echo "==> java -version"; java -version
          echo "==> Setting JAVA_HOME"
          echo 'export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64' >> "$HOME/.bashrc"
          source "$HOME/.bashrc" || true
          echo "JAVA_HOME=$JAVA_HOME"

      - name: 🛠️ ARM GCC toolchain (12.2.rel1)
        shell: bash
        run: |
          set -e
          cd "$HOME/tools"
          echo "==> Download ARM toolchain 12.2.rel1"
          wget -q https://developer.arm.com/-/media/Files/downloads/gnu/12.2.rel1/binrel/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi.tar.xz
          echo "==> Extract"
          tar xf arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi.tar.xz
          rm arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi.tar.xz
          echo "==> GCC version"
          "$HOME/tools/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi/bin/arm-none-eabi-gcc" --version | head -n 1

      - name: 🧱 CMake & 🪄 Ninja versions
        shell: bash
        run: |
          echo "==> CMake version"; cmake --version || true
          echo "==> Ninja version"; ninja --version || true

      - name: 📦 Git LFS install & init
        shell: bash
        run: |
          set -e
          echo "==> Install Git LFS"
          curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
          sudo apt install -y git-lfs
          echo "==> git lfs install"
          git lfs install

      - name: 📚 Clone GSDK (public)
        shell: bash
        run: |
          set -e
          cd "$HOME/src"
          echo "==> Cloning public GSDK"
          git clone https://github.com/SiliconLabs/simplicity_sdk.git gsdk
          cd "$HOME/src/gsdk"
          echo "==> Init core submodules"
          git submodule update --init --recursive util/third_party/cmsis
          git submodule update --init --recursive util/third_party/unity
          git submodule update --init --recursive util/third_party/printf
          echo "==> LFS pull (best effort)"
          git lfs pull || true

      - name: 🌱 Create Python venv (sisdk)
        shell: bash
        run: |
          set -e
          python3 -m venv "$HOME/venvs/sisdk"
          source "$HOME/venvs/sisdk/bin/activate"
          python -V; pip -V
          echo "==> Upgrading pip"
          pip install --upgrade pip

      # ---------- SLC (Step 16) ----------
      - name: 🧩 Clone SLC CLI over SSH (internal)
        shell: bash
        run: |
          set -e
          if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "==> Attempting SSH clone of slc_cli from stash-mirror.silabs.com"
            cd "$HOME/tools"
            git clone ssh://git@stash-mirror.silabs.com/simplicity_studio/slc_cli.git || { echo "!! slc_cli clone failed"; exit 1; }
            echo "==> slc_cli cloned."
          else
            echo "!! SSH key not provided; cannot clone slc_cli over SSH. Skipping SLC clone."
            exit 0
          fi
