name: Ubuntu env 
on: [push]

permissions:
  id-token: write
  contents: read

jobs:
  setup-to-slc:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board: [
            "brd2601b",
            # "brd2608a"
          ]
    env:
      ML_APPS: |
        imu/ble_magic_wand/ble_magic_wand
        imu/imu_anomaly_detection/imu_anomaly_detection
        vision/people_flow_counter_mlx90640/people_flow_counter_mlx90640
        voice/sensory_wakeupword/app/sensory_wakeupword_series_1
        voice/sensory_wakeupword/app/sensory_wakeupword_series_2
    steps:
      - name:  Checkout (public)
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name:  Apt update & essentials
        shell: bash
        run: |
          set -e
          sudo apt update -y
          sudo apt install -y git curl wget unzip build-essential cmake make \
                               python3 python3-pip python3-venv pkg-config \
                               libssl-dev libffi-dev python3-dev ninja-build \
                               telnet netcat-openbsd tree

      - name: Use Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          check-latest: true
          
      - name:  Clone GSDK and ai-ml app
        shell: bash
        run: |
          set -e
          echo "==> Creating developer directories..."
          mkdir -p "$HOME/src" "$HOME/venvs" "$HOME/tools"
          cd "$HOME/src"
          echo "==> Cloning public GSDK"
          git clone https://github.com/SiliconLabs/simplicity_sdk.git gsdk
          cd "$HOME/src/gsdk"
          git checkout v2025.6.2
          mkdir extension
          cd extension
          git clone --recurse-submodules https://github.com/SiliconLabsSoftware/aiml-extension.git aiml-extension
          cd aiml-extension
          git checkout v2.1.2      
          git submodule update --init --recursive
          git lfs pull || true
          cp -r "$GITHUB_WORKSPACE" "$HOME/src/gsdk/extension/machine_learning_applications"

      - name:  ARM GCC toolchain (12.2.rel1)
        shell: bash
        run: |
          set -e
          cd "$HOME/tools"
          echo "==> Download ARM toolchain 12.2.rel1"
          wget -q https://developer.arm.com/-/media/Files/downloads/gnu/12.2.rel1/binrel/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi.tar.xz
          tar xf arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi.tar.xz
          rm arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi.tar.xz
          mv arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi armgnu
          TOOLROOT="$HOME/tools/armgnu"
          echo "ARM_GCC_DIR=$TOOLROOT" >> "$GITHUB_ENV"
          echo "$TOOLROOT/bin/"          >> "$GITHUB_PATH"

          echo "==> GCC version"
          "$TOOLROOT/bin/arm-none-eabi-gcc" --version | head -n 1

      - name:  Create Python venv (sisdk)
        shell: bash
        run: |
          set -e
          python3 -m venv "$HOME/venvs/sisdk"
          source "$HOME/venvs/sisdk/bin/activate"
          python -V; pip -V
          echo "==> Upgrading pip"
          pip install --upgrade pip

      - name: SLC setup
        shell: bash
        run: |
          set -e
          echo "SLC_JAVA_HOME=$JAVA_HOME" >> "$GITHUB_ENV"
          mkdir -p "$HOME/tools"
          cd "$HOME/tools"
          curl -fsSL -o slc_cli_linux.zip https://www.silabs.com/documents/public/software/slc_cli_linux.zip
          rm -rf slc_cli
          unzip -q slc_cli_linux.zip -d slc_cli
          rm slc_cli_linux.zip
          SLC_DIR="$HOME/tools/slc_cli/slc_cli/bin/slc-cli"
          chmod +x "$SLC_DIR/slc-cli"
          ln -sf "$SLC_DIR/slc-cli" "$SLC_DIR/slc"
          echo "UC_CLI_DIR=$SLC_DIR" >> "$GITHUB_ENV"
          echo "$SLC_DIR" >> "$GITHUB_PATH"

      - name: Configure and trust SDK
        shell: bash
        run: |
          slc configuration --sdk ~/src/gsdk
          slc signature trust --sdk ~/src/gsdk
          slc signature trust --extension-path ~/src/gsdk/extension/aiml-extension
          slc signature trust --extension-path ~/src/gsdk/extension/machine_learning_applications

      - name: Generate Machine Learning Repo apps 
        shell: bash
        run: |
          set -e
          cd "$HOME/src/gsdk/extension/machine_learning_applications/application"
          pwd
          tree -L 3
          for APP in $ML_APPS; do
            slc generate -d target/$APP -p $APP.slcp --with ${{ matrix.board }} -s "$HOME/src/gsdk"
            echo "==> Generation complete for  $APP"
            cmake --preset project -S target/$APP/${{ matrix.board }}_cmake
            cmake --build target/$APP/${{ matrix.board }}_cmake/build
            echo "==> Building complete for  $APP"
          done 
          tree


      - name: Done
        shell: bash
        run: |
          echo "==> Finished ENV setup and ML APP's generation."